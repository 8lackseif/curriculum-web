services:
  db:
    container_name: my_database
    image: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=my_database
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=Europe/Madrid
    volumes:
      - my_database:/var/lib/mysql  
      - ./mysql:/docker-entrypoint-initdb.d  
    ports:
      - 3306:3306  
    networks:
      - app-network


  spring_boot_app:
    container_name: spring_boot_app
    build:
      context: ./backend
      dockerfile: Dockerfile    
    restart: always
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_URL=${MYSQL_URL}
    depends_on:
      - db
    ports:
      - 8080:8080
    networks:
      - app-network
   

  angular-app:
    container_name: angular-app
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - spring_boot_app
    ports:
      - 4000:4000
    networks:
      - app-network

  
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - certbot-ssl:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    environment:
      DOMAIN: ${DOMAIN}
    depends_on:
      - angular-app
    restart: always
    networks:
      - app-network

  certbot:
    build:
      context: ./certbot
      dockerfile: Dockerfile
      args:
        DOMAIN: ${DOMAIN}
        EMAIL: ${EMAIL}
    volumes:
      - certbot-ssl:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  my_database:
  certbot-ssl:
  certbot-www:

    
    
